pipeline{
    agent any

    environment {
        GITHUB_CREDENTIAL_ID = 'github-token'
        REPO_URL = 'https://github.com/mayur0601/exchangerates.git'
        SONAR_AUTH_TOKEN = credentials('sonarqube')
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        IMAGE_NAME = 'mayur0601/exchangerates'
    }

    stages {
        stage('Checkout'){
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [
                            url: REPO_URL,
                            credentialsId:GITHUB_CREDENTIAL_ID
                        ]
                    ])
                }
            }
        }

        stage('Build'){
            steps {
                script {
                    sh './gradlew build -x test-x runSmokeTest'
                }
            }
        }

        stage('Unit Test'){
            steps {
                script {
                    sh './gradlew test'
                }
            }
        }

        stage('Smoke Test'){
            steps {
                script {
                    sh './gradlew runSmokeTest'
                }
            }
        }

        stage('Code Analysis'){
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh './gradlew sonar -Dsonar.login=$SONAR_AUTH_TOKEN'
                    }

                    def qualityGate = waitForQualityGate()
                    if(qualityGate.status != 'OK'){
                        error "SonarQube Quality Gate failed: ${qualityGate.status}"
                    }else{
                        echo "SonarQube Quality Gate Passed. "
                    }
                }
            }
        }

        stage('Build and push Docker image'){
            steps {
                script {
                    def commitHash = sh(script: 'git rev-parse --short HEAD',returnStdout:true).trim()

                    def imageTag = ${commitHash}

                    echo "Image tag : ${imageTag}"

                    def imageNameWithTag = "${IMAGE_NAME}:${imageTag}"

                    echo "Image name with tag : ${imageNameWithTag}"

                    echo "push image into docker hub"

                    docker.withRegistry('https://index.docker.io/v1/',DOCKER_CREDENTIALS_ID) {
                        def image = docker.build(imageNameWithTag)
                        image.push()
                    }

                    env.COMMIT_HASH = commitHash
                }
            }
        }

        stage('Deploy on Dev'){
            steps {
                script {
                    def containerName="exchangerates-container"
                    def imageTag=env.COMMIT_HASH

                    // check if container is running, then stop and remove it.

                    sh """
                        if [\$(docker ps-q -f name=${containerName})]; then
                            echo "Stopping and moving existing container..."
                            docker stop ${containerName}
                            docker rm ${containerName}
                        fi
                    """

                    //Run the new container

                    sh """
                        echo "Running new container with image tag ${mageTag}..."
                        docker run -d --name ${containerName} -p 8090:8080 ${IMAGE_NAME}:${imageTag}
                    """
                }
            }
        }

        stage('Health check on Dev'){
            steps {
                script {
                    echo "Performing health check on Docker container..."

                    sleep(time: 30, unit: "SECONDS")

                    def healthUrl = "http://host.docker.internal:8090/actuator/health"

                    def response = sh(script: "curl -s ${healthUrl}", returnStdout: true).trim()

                    echo "Response from health check API: ${response}"

                    def jsonResponse = readJSON text: response

                    def status = jsonResponse.status

                    echo "Health Status: ${status}"

                    if (status == 'UP') {
                           echo 'Health check passed: Application is healthy.'
                    } else {
                           error 'Health check failed: Application is not healthy.'
                    }
                }
            }
        }

        post {
            always {
                echo 'Clean up workspace after build'
                cleanWs()
            }

            success {
                echo 'Pipeline successful!'
            }

            failure {
                echo 'Pipeline failed!'
            }
        }
}