pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS_ID = 'github-token'
        REPO_URL = 'https://github.com/kodedge-swapneel/exchangerates.git'
        SONAR_AUTH_TOKEN = credentials('sonarqube')
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        IMAGE_NAME = 'kodedge/exchangerates'

        //following is not required. You can skip.
        GRADLE_HOME = '/opt/gradle'
        PATH = "$GRADLE_HOME/bin:$PATH"


    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [
                            [
                                url: REPO_URL,
                                credentialsId: GITHUB_CREDENTIALS_ID
                            ]
                        ]
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh './gradlew build -x test -x runSmokeTest'
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    sh './gradlew test'
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    sh './gradlew runSmokeTest'
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh './gradlew sonar -Dsonar.login=$SONAR_AUTH_TOKEN'
                    }

                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "SonarQube Quality Gate failed: ${qualityGate.status}"
                    } else {
                        echo "SonarQube Quality Gate passed."
                    }
                }
            }
        }

        stage('Build and Push docker image') {
            steps {
                script {
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

                    // Define the Docker image tag as the commit hash
                    def imageTag = "${commitHash}"

                    echo "Image tag : ${imageTag}"

                    def imageNameWithTag = "${IMAGE_NAME}:${imageTag}"

                    echo "Image name with tag : ${imageNameWithTag}"

                    echo "Push image in docker hub"

                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        def image = docker.build(imageNameWithTag)
                        image.push()
                    }

                    env.COMMIT_HASH = commitHash
                }
            }
        }

        stage('Deploy on Dev') {
            steps {
                script {
                    def containerName = "exchangerates-container"
                    def imageTag = env.COMMIT_HASH

                    // Check if the container is running, then stop and remove it
                    sh """
                        if [ \$(docker ps -q -f name=${containerName}) ]; then
                            echo "Stopping and removing existing container..."
                            docker stop ${containerName}
                            docker rm ${containerName}
                        fi
                    """

                    // Run the new container
                    sh """
                        echo "Running new container with image tag ${imageTag}..."
                        docker run -d --name ${containerName} -p 8090:8080 ${IMAGE_NAME}:${imageTag}
                    """
                }
            }
        }

        stage('Health check on Dev') {
            steps {
                script {
                    echo "Performing health check on Docker container..."

                    sleep(time: 30, unit: "SECONDS")

                    def healthUrl = "http://host.docker.internal:8090/actuator/health"

                    def response = sh(script: "curl -s ${healthUrl}", returnStdout: true).trim()

                    echo "Response from health check API: ${response}"

                    def jsonResponse = readJSON text: response

                    def status = jsonResponse.status

                    echo "Health Status: ${status}"

                    if (status == 'UP') {
                        echo 'Health check passed: Application is healthy.'
                    } else {
                        error 'Health check failed: Application is not healthy.'
                    }

                }
            }
        }

        stage('Update image tag') {
            steps {
                script {
                    def imageTag = env.COMMIT_HASH

                     sh 'git checkout main'

                    // Use 'sed' to replace the image tag in values.yaml
                    sh """
                        sed -i 's/tag:.*/tag: ${imageTag}/' k8chart/values.yaml
                    """

                    withCredentials([
                        gitUsernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, gitToolName: 'Default')
                    ]) {
                        sh """
                             git config user.email "kodedge-bot-ci@kodedge.com"
                             git config user.name "kodedge-bot-ci"
                             git add k8chart/values.yaml
                             git commit -m "Update image tag to version ${imageTag}"
                             git push origin main
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Clean up workspace after build'
            cleanWs()
        }

        success {
            echo 'Pipeline successful!'
        }

        failure {
            echo 'Pipeline failed!'
        }
    }
}